import { 
    FunctionsMap,
    Function,
    Double,
} from "@foundry/functions-api";
import { 
    Objects, 
    ObjectSet, 
    Asset
 } from "@foundry/ontology-api";

export class averageEngineHours {
//===============================================================================PART 1=============================================================================================//
//-------function to return a "FunctionsMap", which acts as a map between one object instance and the value to display in the derived column for that given object instance---------//
    @Function()
    public async averageEngineHoursColumn(
        myEngines: ObjectSet<Asset>
        ): Promise<FunctionsMap<Asset, Double>>{
//--------Initialise the map--------------------------------------------------------------------------------------------------------------------------------------------------------//
        const map = new FunctionsMap<Asset, Double>();
//--------Get the object set, load all the object in memory-------------------------------------------------------------------------------------------------------------------------//
        const myEnginesAsArray = myEngines.all();
        const promises = myEnginesAsArray.map(currentEngine => this.computeMetric(currentEngine));
        const allResolvedPromises = await Promise.all(promises);
        for (let i = 0; i < myEnginesAsArray.length; i++) {
            map.set(myEnginesAsArray[i], allResolvedPromises[i]);
        }
        return map;
    }
//======================================================================PART 2=======================================================================================================//
//--------------------------------------------Simple function that gets the value for one given object-------------------------------------------------------------------------------//
    @Function()
    public async computeMetric(
        currentEngine : Asset
        ): Promise<Double> {
//--------Pivoting from one Object Type to another
//--------Filtering to the relevant dates 
        const enginesHours = Objects.search()
                            .asset([currentEngine])
                            .searchAroundMeasurements()
                            .orderBy(Measurement => Measurement.measurementValue.desc())
                            .take(12)
                            .filter(Measurement => Measurement.measurementValue);
        const value0 = enginesHours[0]?.measurementValue;
        const value12 = enginesHours[11]?.measurementValue;
        //-------allow for potential undefined values and construct calculation------------------------------------------------------------------------------------------------------------=// 
        const calculation = (value0 !== undefined && value12 !== undefined)? (value0 - value12) / 3 : 0;  
        return calculation;
    }
}
